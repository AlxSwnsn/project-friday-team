{"ast":null,"code":"import { AuthAPI } from '../dal/api';\nconst initialState = {};\nexport const registerReducer = (state, action) => {\n  let copyState = { ...state\n  };\n\n  switch (action.type) {\n    case 'CREATE-USER-DATA':\n      if (action.error) {\n        return { ...state,\n          error: action.error\n        };\n      } else {\n        return copyState;\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst createUserData = error => ({\n  type: 'CREATE-USER-DATA',\n  error\n});\n\nexport const CreateUserThunk = (email, password) => {\n  return dispatch => {\n    AuthAPI.createUser(email, password).then(res => {}).catch(res => {\n      const error = res.addedUser.error;\n      dispatch(createUserData(error));\n    });\n  };\n};\n_c = CreateUserThunk;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateUserThunk\");","map":{"version":3,"sources":["/Users/elizavetaspivak/Documents/study/React/project-friday-team/src/state/register-reducer.ts"],"names":["AuthAPI","initialState","registerReducer","state","action","copyState","type","error","createUserData","CreateUserThunk","email","password","dispatch","createUser","then","res","catch","addedUser"],"mappings":"AACA,SAAQA,OAAR,QAAsB,YAAtB;AAaA,MAAMC,YAA8B,GAAG,EAAvC;AAIA,OAAO,MAAMC,eAAe,GAAG,CAACC,KAAD,EAA0BC,MAA1B,KAA4E;AACvG,MAAIC,SAAS,GAAG,EAAC,GAAGF;AAAJ,GAAhB;;AACA,UAAQC,MAAM,CAACE,IAAf;AACI,SAAK,kBAAL;AACI,UAAIF,MAAM,CAACG,KAAX,EAAkB;AACd,eAAO,EACH,GAAGJ,KADA;AAEHI,UAAAA,KAAK,EAAEH,MAAM,CAACG;AAFX,SAAP;AAIH,OALD,MAKO;AACH,eAAOF,SAAP;AACH;;AACL;AACI,aAAOF,KAAP;AAXR;AAaH,CAfM;;AAiBP,MAAMK,cAAc,GAAID,KAAD,KAA0C;AAACD,EAAAA,IAAI,EAAE,kBAAP;AAA2BC,EAAAA;AAA3B,CAA1C,CAAvB;;AAEA,OAAO,MAAME,eAAe,GAAG,CAACC,KAAD,EAAgBC,QAAhB,KAAqC;AAChE,SAAQC,QAAD,IAAwB;AAC3BZ,IAAAA,OAAO,CAACa,UAAR,CAAmBH,KAAnB,EAA0BC,QAA1B,EACKG,IADL,CACWC,GAAD,IAAS,CAEd,CAHL,EAIKC,KAJL,CAIYD,GAAD,IAAS;AACZ,YAAMR,KAAK,GAAGQ,GAAG,CAACE,SAAJ,CAAcV,KAA5B;AACAK,MAAAA,QAAQ,CAACJ,cAAc,CAACD,KAAD,CAAf,CAAR;AACH,KAPL;AAQH,GATD;AAUH,CAXM;KAAME,e","sourcesContent":["import {Dispatch} from 'redux'\nimport {AuthAPI} from '../dal/api';\n\ntype createUserDataACType = {\n    type: 'CREATE-USER-DATA'\n    error?: string\n}\n\ntype initialStateType = {\n    email: string\n    password: string\n    error?: string\n}\n\nconst initialState: initialStateType = {\n\n}\n\nexport const registerReducer = (state: initialStateType, action: createUserDataACType):initialStateType => {\n    let copyState = {...state}\n    switch (action.type) {\n        case 'CREATE-USER-DATA':\n            if (action.error) {\n                return {\n                    ...state,\n                    error: action.error\n                }\n            } else {\n                return copyState\n            }\n        default:\n            return state\n    }\n}\n\nconst createUserData = (error: string): createUserDataACType => ({type: 'CREATE-USER-DATA', error})\n\nexport const CreateUserThunk = (email: string, password: string) => {\n    return (dispatch: Dispatch) => {\n        AuthAPI.createUser(email, password)\n            .then((res) => {\n\n            })\n            .catch((res) => {\n                const error = res.addedUser.error\n                dispatch(createUserData(error))\n            })\n    }\n}"]},"metadata":{},"sourceType":"module"}