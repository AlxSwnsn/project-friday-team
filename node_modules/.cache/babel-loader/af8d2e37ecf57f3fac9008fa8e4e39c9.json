{"ast":null,"code":"var _jsxFileName = \"/Users/elizavetaspivak/Documents/study/React/project-friday-team/src/Test/h11/common/c7-SuperRange/SuperRange.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Slider from '@material-ui/core/Slider';\nimport { makeStyles } from '@material-ui/core/styles'; // тип пропсов обычного инпута\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  root: {\n    width: 300\n  }\n});\n\nconst SuperRange = ({\n  type,\n  // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n  onChange,\n  onChangeRange,\n  className,\n  value1,\n  setValue1,\n  ...restProps // все остальные пропсы попадут в объект restProps\n\n}) => {\n  _s();\n\n  const classes = useStyles();\n\n  const onChangeCallback = (e, value) => {\n    if (!Array.isArray(value)) {\n      setValue1(value);\n    }\n  }; // @ts-ignore\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: /*#__PURE__*/_jsxDEV(Slider, {\n      value: value1,\n      onChange: onChangeCallback,\n      valueLabelDisplay: \"auto\",\n      \"aria-labelledby\": \"non-linear-slider\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SuperRange, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = SuperRange;\nexport default SuperRange;\n\nvar _c;\n\n$RefreshReg$(_c, \"SuperRange\");","map":{"version":3,"sources":["/Users/elizavetaspivak/Documents/study/React/project-friday-team/src/Test/h11/common/c7-SuperRange/SuperRange.tsx"],"names":["React","Slider","makeStyles","useStyles","root","width","SuperRange","type","onChange","onChangeRange","className","value1","setValue1","restProps","classes","onChangeCallback","e","value","Array","isArray"],"mappings":";;;AAAA,OAAOA,KAAP,MAAyE,OAAzE;AAEA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAAQC,UAAR,QAAyB,0BAAzB,C,CAEA;;;AAWA,MAAMC,SAAS,GAAGD,UAAU,CAAC;AACzBE,EAAAA,IAAI,EAAE;AACFC,IAAAA,KAAK,EAAE;AADL;AADmB,CAAD,CAA5B;;AAMA,MAAMC,UAAyC,GAAG,CAC9C;AACIC,EAAAA,IADJ;AACU;AACNC,EAAAA,QAFJ;AAEcC,EAAAA,aAFd;AAGIC,EAAAA,SAHJ;AAGeC,EAAAA,MAHf;AAGuBC,EAAAA,SAHvB;AAKI,KAAGC,SALP,CAKgB;;AALhB,CAD8C,KAQ7C;AAAA;;AACD,QAAMC,OAAO,GAAGX,SAAS,EAAzB;;AAEA,QAAMY,gBAAgB,GAAG,CAACC,CAAD,EAAqBC,KAArB,KAAkD;AACvE,QAAG,CAACC,KAAK,CAACC,OAAN,CAAcF,KAAd,CAAJ,EAAyB;AACrBL,MAAAA,SAAS,CAACK,KAAD,CAAT;AACH;AACJ,GAJD,CAHC,CASD;;;AACA,sBACI;AAAK,IAAA,SAAS,EAAEH,OAAO,CAACV,IAAxB;AAAA,2BACI,QAAC,MAAD;AACI,MAAA,KAAK,EAAEO,MADX;AAEI,MAAA,QAAQ,EAAEI,gBAFd;AAGI,MAAA,iBAAiB,EAAC,MAHtB;AAII,yBAAgB;AAJpB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,CA5BD;;GAAMT,U;UAScH,S;;;KATdG,U;AA8BN,eAAeA,UAAf","sourcesContent":["import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from \"react\";\nimport s from \"./SuperRange.module.css\";\nimport Slider from '@material-ui/core/Slider';\nimport {makeStyles} from '@material-ui/core/styles';\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\ntype SuperRangePropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\n    onChangeRange?: (value: number) => void\n    value1: number\n    setValue1: (value: number) => void\n};\n\nconst useStyles = makeStyles({\n    root: {\n        width: 300,\n    },\n});\n\nconst SuperRange: React.FC<SuperRangePropsType> = (\n    {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange, onChangeRange,\n        className, value1, setValue1,\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const classes = useStyles()\n\n    const onChangeCallback = (e: ChangeEvent<{}>, value: number | number[]) => {\n        if(!Array.isArray(value)){\n            setValue1(value)\n        }\n    }\n\n    // @ts-ignore\n    return (\n        <div className={classes.root}>\n            <Slider\n                value={value1}\n                onChange={onChangeCallback}\n                valueLabelDisplay=\"auto\"\n                aria-labelledby=\"non-linear-slider\"\n            />\n        </div>\n    );\n}\n\nexport default SuperRange;\n"]},"metadata":{},"sourceType":"module"}