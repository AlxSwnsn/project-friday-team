{"ast":null,"code":"import { AuthAPI } from '../dal/api';\nimport { setErrorAC, setStatusAC } from './app-reducer';\nconst initialState = {\n  isRegister: false\n};\nexport const registerReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'SET-REGISTER-STATUS':\n      return { ...state,\n        isRegister: action.isRegister\n      };\n\n    default:\n      return state;\n  }\n};\nexport const setRegisterStatus = isRegister => ({\n  type: 'SET-REGISTER-STATUS',\n  isRegister\n});\nexport const CreateUserThunk = (email, password) => {\n  return dispatch => {\n    dispatch(setStatusAC(true));\n    AuthAPI.createUser(email, password).then(res => {\n      dispatch(setStatusAC(false));\n      dispatch(setRegisterStatus(true));\n    }).catch(error => {\n      if (!error.error) {\n        dispatch(setErrorAC('Some Error! More details in console.'));\n      } else {\n        dispatch(setErrorAC(error.error));\n      }\n\n      dispatch(setStatusAC(false));\n    });\n  };\n};\n_c = CreateUserThunk;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateUserThunk\");","map":{"version":3,"sources":["/Users/elizavetaspivak/Documents/study/React/project-friday-team/src/state/register-reducer.ts"],"names":["AuthAPI","setErrorAC","setStatusAC","initialState","isRegister","registerReducer","state","action","type","setRegisterStatus","CreateUserThunk","email","password","dispatch","createUser","then","res","catch","error"],"mappings":"AACA,SAAQA,OAAR,QAAsB,YAAtB;AACA,SAAQC,UAAR,EAAoCC,WAApC,QAAuE,eAAvE;AAYA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,UAAU,EAAE;AADK,CAArB;AAMA,OAAO,MAAMC,eAAe,GAAG,CAACC,KAAuB,GAAGH,YAA3B,EAAyCI,MAAzC,KAAmF;AAC9G,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,qBAAL;AACI,aAAO,EACH,GAAGF,KADA;AAEHF,QAAAA,UAAU,EAAEG,MAAM,CAACH;AAFhB,OAAP;;AAIJ;AACI,aAAOE,KAAP;AAPR;AASH,CAVM;AAWP,OAAO,MAAMG,iBAAiB,GAAIL,UAAD,KAAmD;AAChFI,EAAAA,IAAI,EAAE,qBAD0E;AAEhFJ,EAAAA;AAFgF,CAAnD,CAA1B;AAKP,OAAO,MAAMM,eAAe,GAAG,CAACC,KAAD,EAAgBC,QAAhB,KAAqC;AAChE,SAAQC,QAAD,IAAwB;AAC3BA,IAAAA,QAAQ,CAACX,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAF,IAAAA,OAAO,CAACc,UAAR,CAAmBH,KAAnB,EAA0BC,QAA1B,EACKG,IADL,CACWC,GAAD,IAAS;AACXH,MAAAA,QAAQ,CAACX,WAAW,CAAC,KAAD,CAAZ,CAAR;AACAW,MAAAA,QAAQ,CAACJ,iBAAiB,CAAC,IAAD,CAAlB,CAAR;AACH,KAJL,EAKKQ,KALL,CAKYC,KAAD,IAAW;AACd,UAAI,CAACA,KAAK,CAACA,KAAX,EAAkB;AACdL,QAAAA,QAAQ,CAACZ,UAAU,CAAC,sCAAD,CAAX,CAAR;AACH,OAFD,MAEO;AACHY,QAAAA,QAAQ,CAACZ,UAAU,CAACiB,KAAK,CAACA,KAAP,CAAX,CAAR;AACH;;AACDL,MAAAA,QAAQ,CAACX,WAAW,CAAC,KAAD,CAAZ,CAAR;AACH,KAZL;AAaH,GAfD;AAgBH,CAjBM;KAAMQ,e","sourcesContent":["import {Dispatch} from 'redux'\nimport {AuthAPI} from '../dal/api';\nimport {setErrorAC, setErrorACType, setStatusAC, setStatusACType} from './app-reducer';\n\n\ntype setRegisterStatusACType = {\n    type: 'SET-REGISTER-STATUS'\n    isRegister: boolean\n}\n\ntype initialStateType = {\n    isRegister: boolean\n}\n\nconst initialState = {\n    isRegister: false\n}\n\ntype ActionsType = setErrorACType | setStatusACType | setRegisterStatusACType\n\nexport const registerReducer = (state: initialStateType = initialState, action: ActionsType): initialStateType => {\n    switch (action.type) {\n        case 'SET-REGISTER-STATUS':\n            return {\n                ...state,\n                isRegister: action.isRegister\n            }\n        default:\n            return state\n    }\n}\nexport const setRegisterStatus = (isRegister: boolean): setRegisterStatusACType => ({\n    type: 'SET-REGISTER-STATUS',\n    isRegister\n} as const)\n\nexport const CreateUserThunk = (email: string, password: string) => {\n    return (dispatch: Dispatch) => {\n        dispatch(setStatusAC(true))\n        AuthAPI.createUser(email, password)\n            .then((res) => {\n                dispatch(setStatusAC(false))\n                dispatch(setRegisterStatus(true))\n            })\n            .catch((error) => {\n                if (!error.error) {\n                    dispatch(setErrorAC('Some Error! More details in console.'))\n                } else {\n                    dispatch(setErrorAC(error.error))\n                }\n                dispatch(setStatusAC(false))\n            })\n    }\n}"]},"metadata":{},"sourceType":"module"}