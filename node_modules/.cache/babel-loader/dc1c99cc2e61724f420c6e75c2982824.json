{"ast":null,"code":"var _jsxFileName = \"/Users/elizavetaspivak/Documents/study/React/project-friday-team/src/TypeNewPassword/CreateNewPassword.tsx\",\n    _s = $RefreshSig$();\n\nimport s from './CreateNewPassword.module.css';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useFormik } from \"formik\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport { TextField } from \"@material-ui/core\";\nimport React from \"react\";\nimport { Redirect, useParams } from \"react-router-dom\";\nimport { createNewPasswordTC } from \"../state/newPassword-reducer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function CreateNewPassword() {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    token\n  } = useParams();\n  const passwordSent = useSelector(state => state.newPassword.passwordSent);\n  const formik = useFormik({\n    initialValues: {\n      password: \"\"\n    },\n    validate: values => {\n      const errors = {};\n\n      if (!values.password) {\n        errors.password = \"Required\";\n      } else if (!/^[A-Z0-9._%+-]/i.test(values.password)) {\n        errors.password = \"Not acceptable\";\n      }\n\n      return errors;\n    },\n    onSubmit: values => {\n      dispatch(createNewPasswordTC(values.password, token));\n      formik.resetForm();\n    }\n  });\n\n  if (passwordSent) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: s.newPassword,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.newPasswordBlock,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"It-incubator\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Create new password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: formik.handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(FormGroup, {\n          className: s.form,\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            type: \"password\",\n            placeholder: 'Password',\n            helperText: \"Enter the new password and we we'll send you further instructions\",\n            ...formik.getFieldProps(\"password\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 25\n          }, this), formik.touched.password && formik.errors.password ? /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              color: \"red\"\n            },\n            children: formik.errors.password\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 29\n          }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n            className: s.buttonBlock,\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: s.createButton,\n              children: \"Create new password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CreateNewPassword, \"GtlK4j8LNcpnHYTOGZCAneMqmWA=\", false, function () {\n  return [useDispatch, useParams, useSelector, useFormik];\n});\n\n_c = CreateNewPassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateNewPassword\");","map":{"version":3,"sources":["/Users/elizavetaspivak/Documents/study/React/project-friday-team/src/TypeNewPassword/CreateNewPassword.tsx"],"names":["s","useDispatch","useSelector","useFormik","FormGroup","TextField","React","Redirect","useParams","createNewPasswordTC","CreateNewPassword","dispatch","token","passwordSent","state","newPassword","formik","initialValues","password","validate","values","errors","test","onSubmit","resetForm","newPasswordBlock","handleSubmit","form","getFieldProps","touched","color","buttonBlock","createButton"],"mappings":"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","sourcesContent":["import s from './CreateNewPassword.module.css'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {useFormik} from \"formik\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport {TextField} from \"@material-ui/core\";\nimport React from \"react\";\nimport {AppRootStateType} from \"../state/store\";\nimport {Redirect, useParams} from \"react-router-dom\";\nimport {createNewPasswordTC} from \"../state/newPassword-reducer\";\n\ntype FormikErrorType = {\n    password?: string;\n};\n\nexport function CreateNewPassword() {\n    const dispatch = useDispatch();\n    const {token}:any = useParams()\n\n    const passwordSent = useSelector<AppRootStateType, boolean>((state) => state.newPassword.passwordSent);\n\n\n    const formik = useFormik({\n        initialValues: {\n            password: \"\",\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.password) {\n                errors.password = \"Required\";\n            } else if (\n                !/^[A-Z0-9._%+-]/i.test(values.password)\n            ) {\n                errors.password = \"Not acceptable\";\n            }\n            return errors;\n        },\n        onSubmit: (values) => {\n            dispatch(createNewPasswordTC(values.password, token));\n            formik.resetForm();\n        }\n    })\n\n    if (passwordSent) {\n        return <Redirect to={\"/login\"}/>;\n\n    }\n\n    return (\n        <div className={s.newPassword}>\n            <div className={s.newPasswordBlock}>\n                <h1>It-incubator</h1>\n                <h2>Create new password</h2>\n                <form onSubmit={formik.handleSubmit}>\n                    <FormGroup className={s.form}>\n                        <TextField type=\"password\" placeholder={'Password'}\n                                   helperText={\"Enter the new password and we we'll send you further instructions\"}\n                                   {...formik.getFieldProps(\"password\")} />\n                        {formik.touched.password && formik.errors.password ? (\n                            <div style={{color: \"red\"}}>{formik.errors.password}</div>\n                        ) : null}\n                        <div className={s.buttonBlock}>\n                            <button className={s.createButton}>Create new password</button>\n                        </div>\n                    </FormGroup>\n                </form>\n            </div>\n        </div>\n\n    )\n\n}"]},"metadata":{},"sourceType":"module"}