{"ast":null,"code":"var _jsxFileName = \"/Users/elizavetaspivak/Documents/study/React/project-friday-team/src/Register/Register.tsx\";\nimport s from './Register.module.css';\nimport { Field, Formik } from 'formik';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Register() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: s.register,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.register,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Formik, {\n            initialValues: {\n              email: '',\n              password: ''\n            },\n            validate: values => {\n              const errors = {\n                email: ''\n              };\n\n              if (!values.email) {\n                errors.email = 'Required';\n              } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n              }\n\n              return errors;\n            },\n            onSubmit: async (values, {\n              setSubmitting\n            }) => {\n              await new Promise(resolve => setTimeout(resolve, 500));\n              alert(JSON.stringify(values, null, 2));\n              setSubmitting(true);\n            },\n            children: ({\n              values,\n              errors,\n              touched,\n              handleChange,\n              handleBlur,\n              handleSubmit,\n              isSubmitting\n            }) => /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: handleSubmit,\n              children: [/*#__PURE__*/_jsxDEV(Field, {\n                id: \"email\",\n                type: \"email\",\n                name: \"email\",\n                onChange: handleChange,\n                onBlur: handleBlur,\n                value: values.email\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 41,\n                columnNumber: 37\n              }, this), errors.email && touched.email && errors.email, /*#__PURE__*/_jsxDEV(Field, {\n                id: \"password\",\n                type: \"password\",\n                name: \"password\",\n                onChange: handleChange,\n                onBlur: handleBlur,\n                value: values.password\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 50,\n                columnNumber: 37\n              }, this), errors.password && touched.password && errors.password, /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"submit\",\n                disabled: isSubmitting,\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 12,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 9\n  }, this);\n}\n_c = Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["/Users/elizavetaspivak/Documents/study/React/project-friday-team/src/Register/Register.tsx"],"names":["s","Field","Formik","Register","register","email","password","values","errors","test","setSubmitting","Promise","resolve","setTimeout","alert","JSON","stringify","touched","handleChange","handleBlur","handleSubmit","isSubmitting"],"mappings":";AAAA,OAAOA,CAAP,MAAc,uBAAd;AACA,SAAQC,KAAR,EAAeC,MAAf,QAA4B,QAA5B;;AAEA,OAAO,SAASC,QAAT,GAAoB;AAGvB,sBACI;AAAK,IAAA,SAAS,EAAEH,CAAC,CAACI,QAAlB;AAAA,2BACI;AAAK,MAAA,SAAS,EAAEJ,CAAC,CAACI,QAAlB;AAAA,6BACI;AAAA,+BACI;AAAA,iCACI,QAAC,MAAD;AACI,YAAA,aAAa,EAAE;AAACC,cAAAA,KAAK,EAAE,EAAR;AAAYC,cAAAA,QAAQ,EAAE;AAAtB,aADnB;AAEI,YAAA,QAAQ,EAAEC,MAAM,IAAI;AAChB,oBAAMC,MAAM,GAAG;AAACH,gBAAAA,KAAK,EAAE;AAAR,eAAf;;AACA,kBAAI,CAACE,MAAM,CAACF,KAAZ,EAAmB;AACfG,gBAAAA,MAAM,CAACH,KAAP,GAAe,UAAf;AACH,eAFD,MAEO,IACH,CAAC,2CAA2CI,IAA3C,CAAgDF,MAAM,CAACF,KAAvD,CADE,EAEL;AACEG,gBAAAA,MAAM,CAACH,KAAP,GAAe,uBAAf;AACH;;AACD,qBAAOG,MAAP;AACH,aAZL;AAaI,YAAA,QAAQ,EAAE,OAAOD,MAAP,EAAe;AAACG,cAAAA;AAAD,aAAf,KAAmC;AACzC,oBAAM,IAAIC,OAAJ,CAAaC,OAAD,IAAaC,UAAU,CAACD,OAAD,EAAU,GAAV,CAAnC,CAAN;AACAE,cAAAA,KAAK,CAACC,IAAI,CAACC,SAAL,CAAeT,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAD,CAAL;AACAG,cAAAA,aAAa,CAAC,IAAD,CAAb;AACH,aAjBL;AAAA,sBAmBK,CAAC;AACIH,cAAAA,MADJ;AAEIC,cAAAA,MAFJ;AAGIS,cAAAA,OAHJ;AAIIC,cAAAA,YAJJ;AAKIC,cAAAA,UALJ;AAMIC,cAAAA,YANJ;AAOIC,cAAAA;AAPJ,aAAD,kBASG;AAAM,cAAA,QAAQ,EAAED,YAAhB;AAAA,sCACI,QAAC,KAAD;AACI,gBAAA,EAAE,EAAC,OADP;AAEI,gBAAA,IAAI,EAAC,OAFT;AAGI,gBAAA,IAAI,EAAC,OAHT;AAII,gBAAA,QAAQ,EAAEF,YAJd;AAKI,gBAAA,MAAM,EAAEC,UALZ;AAMI,gBAAA,KAAK,EAAEZ,MAAM,CAACF;AANlB;AAAA;AAAA;AAAA;AAAA,sBADJ,EASKG,MAAM,CAACH,KAAP,IAAgBY,OAAO,CAACZ,KAAxB,IAAiCG,MAAM,CAACH,KAT7C,eAUI,QAAC,KAAD;AACI,gBAAA,EAAE,EAAC,UADP;AAEI,gBAAA,IAAI,EAAC,UAFT;AAGI,gBAAA,IAAI,EAAC,UAHT;AAII,gBAAA,QAAQ,EAAEa,YAJd;AAKI,gBAAA,MAAM,EAAEC,UALZ;AAMI,gBAAA,KAAK,EAAEZ,MAAM,CAACD;AANlB;AAAA;AAAA;AAAA;AAAA,sBAVJ,EAkBKE,MAAM,CAACF,QAAP,IAAmBW,OAAO,CAACX,QAA3B,IAAuCE,MAAM,CAACF,QAlBnD,eAmBI;AAAQ,gBAAA,IAAI,EAAC,QAAb;AAAsB,gBAAA,QAAQ,EAAEe,YAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAnBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AA5BR;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AA+DH;KAlEelB,Q","sourcesContent":["import s from './Register.module.css'\nimport {Field, Formik} from 'formik';\n\nexport function Register() {\n\n\n    return (\n        <div className={s.register}>\n            <div className={s.register}>\n                <div>\n                    <div>\n                        <Formik\n                            initialValues={{email: '', password: ''}}\n                            validate={values => {\n                                const errors = {email: ''};\n                                if (!values.email) {\n                                    errors.email = 'Required';\n                                } else if (\n                                    !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n                                ) {\n                                    errors.email = 'Invalid email address';\n                                }\n                                return errors;\n                            }}\n                            onSubmit={async (values, {setSubmitting}) => {\n                                await new Promise((resolve) => setTimeout(resolve, 500));\n                                alert(JSON.stringify(values, null, 2));\n                                setSubmitting(true);\n                            }}\n                        >\n                            {({\n                                  values,\n                                  errors,\n                                  touched,\n                                  handleChange,\n                                  handleBlur,\n                                  handleSubmit,\n                                  isSubmitting\n                              }) => (\n                                <form onSubmit={handleSubmit}>\n                                    <Field\n                                        id='email'\n                                        type=\"email\"\n                                        name=\"email\"\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        value={values.email}\n                                    />\n                                    {errors.email && touched.email && errors.email}\n                                    <Field\n                                        id='password'\n                                        type=\"password\"\n                                        name=\"password\"\n                                        onChange={handleChange}\n                                        onBlur={handleBlur}\n                                        value={values.password}\n                                    />\n                                    {errors.password && touched.password && errors.password}\n                                    <button type=\"submit\" disabled={isSubmitting}>\n                                        Submit\n                                    </button>\n                                </form>\n                            )}\n                        </Formik>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}