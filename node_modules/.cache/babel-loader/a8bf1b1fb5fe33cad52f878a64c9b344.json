{"ast":null,"code":"var _jsxFileName = \"/Users/elizavetaspivak/Documents/study/React/project-friday-team/src/Login/Login.tsx\",\n    _s = $RefreshSig$();\n\nimport { FormControlLabel, TextField } from \"@material-ui/core\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport { useFormik } from \"formik\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { NavLink, Redirect } from \"react-router-dom\";\nimport { loginTC } from \"../state/login-reducer\";\nimport s from \"./Login.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Login() {\n  _s();\n\n  const isLoginIn = useSelector(state => state.login.isLoggedIn);\n  const dispath = useDispatch();\n  const formik = useFormik({\n    initialValues: {\n      email: \"\",\n      password: \"\",\n      rememberMe: false\n    },\n    validate: values => {\n      const errors = {};\n\n      if (!values.email) {\n        errors.email = \"Required\";\n      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n        errors.email = \"Invalid email address\";\n      }\n\n      if (!values.password) {\n        errors.password = \"Required\";\n      } else if (values.password.length < 7) {\n        errors.password = \"Password must be more than 7 symbols\";\n      }\n\n      return errors;\n    },\n    onSubmit: values => {\n      // alert(JSON.stringify(values));\n      dispath(loginTC(values));\n      formik.resetForm();\n    }\n  });\n\n  if (isLoginIn) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/profile\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: s.login,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: formik.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            type: \"email\",\n            ...formik.getFieldProps(\"email\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this), formik.touched.email && formik.errors.email ? /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              color: \"red\"\n            },\n            children: formik.errors.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 15\n          }, this) : null, /*#__PURE__*/_jsxDEV(TextField, {\n            type: \"password\",\n            ...formik.getFieldProps(\"password\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this), formik.touched.password && formik.errors.password ? /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              color: \"red\"\n            },\n            children: formik.errors.password\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              label: \"Remember me\",\n              control: /*#__PURE__*/_jsxDEV(Checkbox // name=\"rememberMe\"\n              // onChange={formik.handleChange}\n              // value={formik.values.rememberMe}\n              , { ...formik.getFieldProps(\"rememberMe\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 19\n              }, this) // ошибка Type 'boolean' is not assignable to type 'string | number | readonly string[] | undefined'.\n              // поэт надо не value а  checked={formik.values.rememberMe}\n              //   value={formik.values.rememberMe}\n              // {...formik.getFieldProps(\"rememberMe\")}\n\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            children: \" Sing In \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: s.navlinkLogin,\n          children: [/*#__PURE__*/_jsxDEV(NavLink, {\n            to: \"/register\",\n            children: \"Not registered?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(NavLink, {\n            to: \"/recovery\",\n            children: \"Forgot password?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Login, \"kcnSuYJ/5r2e0NJzk4hRXj1OJPA=\", false, function () {\n  return [useSelector, useDispatch, useFormik];\n});\n\n_c = Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/Users/elizavetaspivak/Documents/study/React/project-friday-team/src/Login/Login.tsx"],"names":["FormControlLabel","TextField","Checkbox","FormGroup","useFormik","useDispatch","useSelector","NavLink","Redirect","loginTC","s","Login","isLoginIn","state","login","isLoggedIn","dispath","formik","initialValues","email","password","rememberMe","validate","values","errors","test","length","onSubmit","resetForm","handleSubmit","getFieldProps","touched","color","navlinkLogin"],"mappings":"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","sourcesContent":["import { FormControlLabel, TextField } from \"@material-ui/core\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport { useFormik } from \"formik\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { NavLink, Redirect } from \"react-router-dom\";\nimport { loginTC } from \"../state/login-reducer\";\nimport { AppRootStateType } from \"../state/store\";\nimport s from \"./Login.module.css\";\n\ntype FormikErrorType = {\n  email?: string;\n  password?: string;\n  rememberMe?: boolean;\n};\n\nexport function Login() {\n  const isLoginIn = useSelector<AppRootStateType, boolean>(\n    (state) => state.login.isLoggedIn\n  );\n  const dispath = useDispatch();\n\n\n  const formik = useFormik({\n    initialValues: {\n      email: \"\",\n      password: \"\",\n      rememberMe: false,\n    },\n    validate: (values) => {\n      const errors: FormikErrorType = {};\n      if (!values.email) {\n        errors.email = \"Required\";\n      } else if (\n        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n      ) {\n        errors.email = \"Invalid email address\";\n      }\n      if (!values.password) {\n        errors.password = \"Required\";\n      } else if (values.password.length < 7) {\n        errors.password = \"Password must be more than 7 symbols\";\n      }\n      return errors;\n    },\n\n    onSubmit: (values) => {\n      // alert(JSON.stringify(values));\n      dispath(loginTC(values));\n      formik.resetForm();\n    },\n  });\n\n  if (isLoginIn) {\n    return <Redirect to={\"/profile\"} />;\n  }\n\n  return (\n    <div className={s.login}>\n      <div>\n        <form onSubmit={formik.handleSubmit}>\n          <FormGroup>\n            <TextField type=\"email\" {...formik.getFieldProps(\"email\")} />\n            {formik.touched.email && formik.errors.email ? (\n              <div style={{ color: \"red\" }}>{formik.errors.email}</div>\n            ) : null}\n\n            <TextField type=\"password\" {...formik.getFieldProps(\"password\")} />\n            {formik.touched.password && formik.errors.password ? (\n              <div style={{ color: \"red\" }}>{formik.errors.password}</div>\n            ) : null}\n\n            <div>\n              <FormControlLabel\n                label={\"Remember me\"}\n                control={\n                  <Checkbox\n                    // name=\"rememberMe\"\n                    // onChange={formik.handleChange}\n                    // value={formik.values.rememberMe}\n                    {...formik.getFieldProps(\"rememberMe\")}\n                  />\n                }\n\n                // ошибка Type 'boolean' is not assignable to type 'string | number | readonly string[] | undefined'.\n                // поэт надо не value а  checked={formik.values.rememberMe}\n                //   value={formik.values.rememberMe}\n                // {...formik.getFieldProps(\"rememberMe\")}\n              />\n            </div>\n\n            <button> Sing In </button>\n          </FormGroup>\n          <div className={s.navlinkLogin}>\n            <NavLink to={\"/register\"}>Not registered?</NavLink>\n            <NavLink to={\"/recovery\"}>Forgot password?</NavLink>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}