{"ast":null,"code":"import { loginApi } from '../Login/loginApi';\nconst initialState = {\n  isLoggedIn: false,\n  user: {\n    id: '',\n    email: '',\n    name: '',\n    publicCardPacksCount: 0,\n    // количество колод\n    created: Date,\n    updated: Date,\n    isAdmin: false,\n    verified: false,\n    // подтвердил ли почту\n    rememberMe: false\n  }\n};\nexport const loginReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'LOGIN/SET-IS-LOGGED-IN':\n      return { ...state,\n        isLoggedIn: action.value\n      };\n\n    case 'LOGIN/SET_USER_DATA':\n      // debugger\n      return { ...state,\n        user: action.userData\n      };\n\n    default:\n      return state;\n  }\n}; // actions\n\nexport const setIsLoggedInAC = value => ({\n  type: 'LOGIN/SET-IS-LOGGED-IN',\n  value\n});\nexport const setUserDataAC = userData => {\n  //  debugger\n  return {\n    type: 'LOGIN/SET_USER_DATA',\n    userData\n  };\n}; // thunks\n\nexport const authThunkCreator = () => {\n  return dispatch => {\n    return loginApi.me().then(data => {\n      dispatch(setUserDataAC(data.data));\n    });\n  };\n};\nexport const loginTC = data => dispatch => {\n  loginApi.login(data).then(res => {\n    dispatch(setIsLoggedInAC(true));\n    dispatch(setUserDataAC(res.data));\n  }).catch();\n};\nexport const logoutTC = () => dispatch => {\n  loginApi.logout().then(res => {\n    dispatch(setIsLoggedInAC(false));\n  }).catch();\n}; // export const getUserDataTC =\n//   (data: ResponseLoginType) => (dispatch: Dispatch<ActionsType>) => {\n//     debugger\n//     dispatch(setUserDataAC(data));\n//     dispatch(setIsLoggedInAC(true));\n//   };\n// types","map":{"version":3,"sources":["/Users/elizavetaspivak/Documents/study/React/project-friday-team/src/state/login-reducer.ts"],"names":["loginApi","initialState","isLoggedIn","user","id","email","name","publicCardPacksCount","created","Date","updated","isAdmin","verified","rememberMe","loginReducer","state","action","type","value","userData","setIsLoggedInAC","setUserDataAC","authThunkCreator","dispatch","me","then","data","loginTC","login","res","catch","logoutTC","logout"],"mappings":"AACA,SAAQA,QAAR,QAAqD,mBAArD;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,UAAU,EAAE,KADK;AAEjBC,EAAAA,IAAI,EAAE;AACFC,IAAAA,EAAE,EAAE,EADF;AAEFC,IAAAA,KAAK,EAAE,EAFL;AAGFC,IAAAA,IAAI,EAAE,EAHJ;AAIFC,IAAAA,oBAAoB,EAAE,CAJpB;AAIuB;AACzBC,IAAAA,OAAO,EAAEC,IALP;AAMFC,IAAAA,OAAO,EAAED,IANP;AAOFE,IAAAA,OAAO,EAAE,KAPP;AAQFC,IAAAA,QAAQ,EAAE,KARR;AAQe;AACjBC,IAAAA,UAAU,EAAE;AATV;AAFW,CAArB;AAeA,OAAO,MAAMC,YAAY,GAAG,CACxBC,KAAuB,GAAGd,YADF,EAExBe,MAFwB,KAGL;AACnB,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,wBAAL;AACI,aAAO,EAAC,GAAGF,KAAJ;AAAWb,QAAAA,UAAU,EAAEc,MAAM,CAACE;AAA9B,OAAP;;AACJ,SAAK,qBAAL;AACI;AACA,aAAO,EAAC,GAAGH,KAAJ;AAAWZ,QAAAA,IAAI,EAAEa,MAAM,CAACG;AAAxB,OAAP;;AACJ;AACI,aAAOJ,KAAP;AAPR;AASH,CAbM,C,CAeP;;AACA,OAAO,MAAMK,eAAe,GAAIF,KAAD,KAC1B;AAACD,EAAAA,IAAI,EAAE,wBAAP;AAAiCC,EAAAA;AAAjC,CAD0B,CAAxB;AAGP,OAAO,MAAMG,aAAa,GAAIF,QAAD,IAAiC;AAC1D;AACA,SACI;AACIF,IAAAA,IAAI,EAAE,qBADV;AAEIE,IAAAA;AAFJ,GADJ;AAKH,CAPM,C,CASP;;AACA,OAAO,MAAMG,gBAAgB,GAAG,MAAM;AAClC,SAAQC,QAAD,IAAmB;AACtB,WAAOvB,QAAQ,CAACwB,EAAT,GAAcC,IAAd,CAAmBC,IAAI,IAAI;AAC1BH,MAAAA,QAAQ,CAACF,aAAa,CAACK,IAAI,CAACA,IAAN,CAAd,CAAR;AACH,KAFE,CAAP;AAIH,GALD;AAMH,CAPM;AASP,OAAO,MAAMC,OAAO,GACfD,IAAD,IAAsBH,QAAD,IAAqC;AACtDvB,EAAAA,QAAQ,CACH4B,KADL,CACWF,IADX,EAEKD,IAFL,CAEWI,GAAD,IAAS;AACXN,IAAAA,QAAQ,CAACH,eAAe,CAAC,IAAD,CAAhB,CAAR;AACAG,IAAAA,QAAQ,CAACF,aAAa,CAACQ,GAAG,CAACH,IAAL,CAAd,CAAR;AACH,GALL,EAMKI,KANL;AAOH,CATE;AAUP,OAAO,MAAMC,QAAQ,GAAG,MAAOR,QAAD,IAAqC;AAC/DvB,EAAAA,QAAQ,CACHgC,MADL,GAEKP,IAFL,CAEWI,GAAD,IAAS;AACXN,IAAAA,QAAQ,CAACH,eAAe,CAAC,KAAD,CAAhB,CAAR;AACH,GAJL,EAKKU,KALL;AAMH,CAPM,C,CASP;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import {Dispatch} from 'redux';\nimport {loginApi, LoginType, ResponseLoginType} from '../Login/loginApi';\n\nconst initialState = {\n    isLoggedIn: false as boolean,\n    user: {\n        id: '',\n        email: '',\n        name: '',\n        publicCardPacksCount: 0, // количество колод\n        created: Date,\n        updated: Date,\n        isAdmin: false,\n        verified: false, // подтвердил ли почту\n        rememberMe: false\n    } as ResponseLoginType | {},\n};\n\nexport const loginReducer = (\n    state: InitialStateType = initialState,\n    action: ActionsType\n): InitialStateType => {\n    switch (action.type) {\n        case 'LOGIN/SET-IS-LOGGED-IN':\n            return {...state, isLoggedIn: action.value};\n        case 'LOGIN/SET_USER_DATA':\n            // debugger\n            return {...state, user: action.userData};\n        default:\n            return state;\n    }\n};\n\n// actions\nexport const setIsLoggedInAC = (value: boolean) =>\n    ({type: 'LOGIN/SET-IS-LOGGED-IN', value} as const);\n\nexport const setUserDataAC = (userData: ResponseLoginType) => {\n    //  debugger\n    return (\n        {\n            type: 'LOGIN/SET_USER_DATA',\n            userData,\n        } as const);\n}\n\n// thunks\nexport const authThunkCreator = () => {\n    return (dispatch: any) => {\n        return loginApi.me().then(data => {\n                dispatch(setUserDataAC(data.data))\n            }\n        )\n    }\n}\n\nexport const loginTC =\n    (data: LoginType) => (dispatch: Dispatch<ActionsType>) => {\n        loginApi\n            .login(data)\n            .then((res) => {\n                dispatch(setIsLoggedInAC(true));\n                dispatch(setUserDataAC(res.data))\n            })\n            .catch();\n    };\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\n    loginApi\n        .logout()\n        .then((res) => {\n            dispatch(setIsLoggedInAC(false));\n        })\n        .catch();\n};\n\n// export const getUserDataTC =\n//   (data: ResponseLoginType) => (dispatch: Dispatch<ActionsType>) => {\n//     debugger\n//     dispatch(setUserDataAC(data));\n//     dispatch(setIsLoggedInAC(true));\n//   };\n\n// types\ntype InitialStateType = typeof initialState;\n\nexport type setIsLoggedInACType = ReturnType<typeof setIsLoggedInAC>;\ntype ActionsType =\n    | ReturnType<typeof setIsLoggedInAC>\n    | ReturnType<typeof setUserDataAC>\n\n \n"]},"metadata":{},"sourceType":"module"}