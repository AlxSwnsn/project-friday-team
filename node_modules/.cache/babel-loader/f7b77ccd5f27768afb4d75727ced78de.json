{"ast":null,"code":"// вот вам функция для сохранения объектов в память браузера\n// (данные в этом хранилище сохраняться даже при перезагрузке компа):\nexport function saveState(key,state){var stateAsString=JSON.stringify(state);localStorage.setItem(key,stateAsString);}// и вот вам функция для получения сохранённого объекта в памяти браузера:\nexport function restoreState(key,defaultState){var state=defaultState;var stateAsString=localStorage.getItem(key);if(stateAsString!==null)state=JSON.parse(stateAsString);return state;}// ---------------------------------------------------------------------------------------------------------------\n// пример использования:\n// сохраняем объект типа StateType в ячейке 'test'\nsaveState('test',{x:'A',y:1});// получем в переменную state объект из ячейки 'test' или дэфолтный объект если ячейка пуста\n// const state: StateType = restoreState<StateType>('test', {x: '', y: 0})","map":{"version":3,"sources":["/Users/elizavetaspivak/Documents/study/React/project-friday-team/src/Test/h6/localStorage/localStorage.ts"],"names":["saveState","key","state","stateAsString","JSON","stringify","localStorage","setItem","restoreState","defaultState","getItem","parse","x","y"],"mappings":"AAAA;AACA;AACA,MAAO,SAASA,CAAAA,SAAT,CAAsBC,GAAtB,CAAmCC,KAAnC,CAA6C,CAChD,GAAMC,CAAAA,aAAa,CAAGC,IAAI,CAACC,SAAL,CAAeH,KAAf,CAAtB,CACAI,YAAY,CAACC,OAAb,CAAqBN,GAArB,CAA0BE,aAA1B,EACH,CAED;AACA,MAAO,SAASK,CAAAA,YAAT,CAAyBP,GAAzB,CAAsCQ,YAAtC,CAAuD,CAC1D,GAAIP,CAAAA,KAAK,CAAGO,YAAZ,CACA,GAAMN,CAAAA,aAAa,CAAGG,YAAY,CAACI,OAAb,CAAqBT,GAArB,CAAtB,CACA,GAAIE,aAAa,GAAK,IAAtB,CAA4BD,KAAK,CAAGE,IAAI,CAACO,KAAL,CAAWR,aAAX,CAAR,CAC5B,MAAOD,CAAAA,KAAP,CACH,CAED;AACA;AAMA;AACAF,SAAS,CAAY,MAAZ,CAAoB,CAACY,CAAC,CAAE,GAAJ,CAASC,CAAC,CAAE,CAAZ,CAApB,CAAT,CAEA;AACA","sourcesContent":["// вот вам функция для сохранения объектов в память браузера\n// (данные в этом хранилище сохраняться даже при перезагрузке компа):\nexport function saveState<T>(key: string, state: T) {\n    const stateAsString = JSON.stringify(state)\n    localStorage.setItem(key, stateAsString)\n}\n\n// и вот вам функция для получения сохранённого объекта в памяти браузера:\nexport function restoreState<T>(key: string, defaultState: T) {\n    let state = defaultState\n    const stateAsString = localStorage.getItem(key)\n    if (stateAsString !== null) state = JSON.parse(stateAsString) as T\n    return state\n}\n\n// ---------------------------------------------------------------------------------------------------------------\n// пример использования:\ntype StateType = {\n    x: string\n    y: number\n}\n\n// сохраняем объект типа StateType в ячейке 'test'\nsaveState<StateType>('test', {x: 'A', y: 1})\n\n// получем в переменную state объект из ячейки 'test' или дэфолтный объект если ячейка пуста\n// const state: StateType = restoreState<StateType>('test', {x: '', y: 0})\n"]},"metadata":{},"sourceType":"module"}